# -*- coding: UTF-8 -*-
import sys
import os
import json

print "Generating emojitex-characters.sty ..."
os.chdir(os.path.dirname(os.path.abspath(sys.argv[0])))
# Open tex files:
charFile = open('../coloremoji_characters.sty', 'w')
coverageFile = open('../coloremoji_coverage_list.tex', 'w')
codeFile = open('../coloremoji_shortnames.sty', 'w')
# Print tex file headers:
charFile.write('% Code generated by "'+os.path.basename(sys.argv[0])+'".')
coverageFile.write('% Code generated by "'+os.path.basename(sys.argv[0])+'".\n')
codeFile.write('% Code generated by "'+os.path.basename(sys.argv[0])+'".')
codeFile.write('''
\\cs_new:Npn \coloremoji_shortnames #1 {
	\str_case_x:nnF {\\tl_trim_spaces:n{#1}}{''')
# Emoji categories:
allEmoji = []
blacklistedEmoji = []	# not strictly needed -> cleanup?!
singleEmoji = []
singleEmojiHasComposite = []
compositeTwoEmoji = []	# not strictly needed -> cleanup?!
compositeMultipleEmoji = []	# not strictly needed -> cleanup?!
# Exceptions:
blacklist = ['2122']	# exception: â„¢

def isException( emojiBaseCode ):
	# blacklisted or ASCII character?
	if emojiBaseCode in blacklist or int(emojiBaseCode,16) < 256:
		return True
	else:
		return False

# Checks if flag/skin color variation (unused):
# int("1f1e6",16) <= int(emojiBaseCode,16) <= int("1f1ff",16) # flag
# emojiCode.split('-')[1] in {'1f3fb', '1f3fc', '1f3fd', '1f3fd', '1f3fe', '1f3ff'} # skin color variation
# Return Unicode character from Hexcode
def getUnicodeFromHex ( emojiBaseCode ):
	return unicode('\U'+emojiBaseCode.zfill(8), 'unicode-escape').encode('utf8')

def getShortnames ( emojiCode ):
	shortnames = []
	if emojiCode in emojiData:
		shortnames.append(emojiData[emojiCode]["shortname"])
		for shortname in emojiData[emojiCode]["ascii"]:
			# LaTeX can't handle %, # and \
			if '%' in shortname or '#' in shortname or '\\' in shortname:
				continue
			shortnames.append(shortname)
		for shortname in emojiData[emojiCode]["shortname_alternates"]:
			shortnames.append(shortname)
	return shortnames

def writeEmojiShortnameLine ( emojiCode ):
	shortnames = getShortnames(emojiCode)
	for shortname in shortnames:
		codeFile.write('\n		'+'{0: <10}'.format('{' + shortname.encode('utf8') + '}')+'	{\printemoji{' + emojiCode + '}}')

# Sort emoji in categories:
for emojiFile in os.listdir('../emoji_images'):
	if not (emojiFile.endswith('.pdf')):
		continue
	emojiCode = emojiFile.split('.pdf')[0]
	emojiCodes = emojiCode.split('-')
	emojiLength = len(emojiCodes)
	allEmoji.append(emojiCode)
	if isException(emojiCodes[0]):
		continue
		blacklistedEmoji.append(emojiCode)
	elif emojiLength == 1:
		singleEmoji.append(emojiCode)
	elif emojiLength == 2:
		if emojiCodes[0] in singleEmoji:
			singleEmojiHasComposite.append(singleEmoji.pop(emojiCodes[0]))
		else:
			singleEmojiHasComposite.append(emojiCodes[0])
		compositeTwoEmoji.append(emojiCode)
	else:
		compositeMultipleEmoji.append(emojiCode)


# Read emoji information, if emojitwo is available:
emojiData = []
if os.path.isfile('../emojitwo/emoji.json'):
	print '  Generating shortname list.'
	with open('../emojitwo/emoji.json', 'r') as f:
		emojiData = json.load(f)
else:
	print '  Can not generate shortname list. Copy emojitwo folder in repository root to generate shortnames.'

# Create shortname(s) and/or new unicode characters  for emoji:
# - emoji is single emoji (and is not part of composite emoji): simple emoji-command + shortname(s)
# - emoji is single emoji (and possible beginning of composite emoji): composite emoji-command + shortname(s)
# - emoji is exception, emoji is composite emoji consisting of 2 emoji and emoji is other composite emoji: shortname(s)
for emojiCode in allEmoji:
	emojiBaseChar = getUnicodeFromHex(emojiCode.split('-')[0])
	shortnameCount = writeEmojiShortnameLine( emojiCode )
	if emojiCode in singleEmojiHasComposite:
		charFile.write('\n\\newunicodechar{' + emojiBaseChar + '}{\coloremoji_composite:n{' + emojiBaseChar + '}} % ' + emojiCode)
	elif emojiCode in singleEmoji:
		charFile.write('\n\\newunicodechar{' + emojiBaseChar + '}{{\coloremoji{' + emojiBaseChar + '}}} % ' + emojiCode)
#	else:
#		charFile.write('\n% ' + emojiCode)

# Create coverage tex:
for emojiCode in allEmoji:
	shortnames = getShortnames(emojiCode)
	#emojiCodes = emojiCode.split('-')
	#emojiChar = ''
	#for emojiCodePart in emojiCodes:
	#	emojiChar += getUnicodeFromHex(emojiCodePart)
	# \hfill code: 0023-20e3
	item = '\item[\printemoji{'+emojiCode+'}] shortname(s): '	
	for shortname in shortnames:
		item += '\\verb|' + shortname + '|\hspace*{1em}'
	item += '\hfill code: ' + emojiCode + '\n'
	coverageFile.write(item.encode('utf-8'))
	
codeFile.write('''
	}{
		\printemoji{#1}
	}
}''')
print "Done."
charFile.close()
coverageFile.close()
codeFile.close()